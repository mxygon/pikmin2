MEMORY {
text : origin = 0x80003100
}
SECTIONS {
GROUP: {
    .init ALIGN(0x20) : {}
    ._extab ALIGN(0x20) : {}
    ._exidx ALIGN(0x20) : {}
    .text ALIGN(0x20) : {}
    .ctors ALIGN(0x20) : {}
    .dtors ALIGN(0x20) : {}
    .rodata ALIGN(0x20) : {}
    .data ALIGN(0x20) : {}
    .bss ALIGN(0x20) : {}
    .sdata ALIGN(0x20) : {}
    .sbss ALIGN(0x20) : {}
    .sdata2 ALIGN(0x20): {}
    .sbss2 ALIGN(0x20) : {}
    .stack ALIGN(0x100) : {}
} > text
	_stack_addr = (_f_sbss2 + SIZEOF(.sbss2) + 65536 + 0x7) & ~0x7;
    _stack_end = _f_sbss2 + SIZEOF(.sbss2);
    _db_stack_addr = (_stack_addr + 0x2000);
    _db_stack_end = _stack_addr;
    __ArenaLo = (_db_stack_addr + 0x1f) & ~0x1f;
    __ArenaHi = 0x81700000;

    /* Sizes */
    _size_init = SIZEOF(.init);
    _size_extab = SIZEOF(._extab);
    _size_extabindex = SIZEOF(._exidx);
    _size_text = SIZEOF(.text);
    _size_ctors = SIZEOF(.ctors); /* unlike the other sections, we can use this size symbol as-is. */
    _size_dtors = SIZEOF(.dtors);
    _size_rodata = SIZEOF(.rodata);
    _size_data = SIZEOF(.data);
    _size_sdata = SIZEOF(.sdata); /* unlike the other sections, we can use this size symbol as-is. */
    _size_sdata2 = SIZEOF(.sdata2);
    _size_bss = SIZEOF(.bss);
    _size_sbss = SIZEOF(.sbss);
    _size_sbss2 = SIZEOF(.sbss2); /* unlike the other sections, we can use this size symbol as-is. */
    
    /* Sizes, but reduced to match lbl_80005544 entries in .init. */
    /* TODO: Figure out why they're reduced with seemingly */
    /* random offsets? Perhaps it's padding. */
    _size_init_reduced = _size_init-0x18;
    _size_extab_reduced = _size_extab-0x18;
    _size_extabindex_reduced = _size_extabindex-0x4;
    _size_text_reduced = _size_text-0x1C;
    _size_dtors_reduced = _size_dtors-0x10;
    _size_rodata_reduced = _size_rodata-0xE;
    _size_data_reduced = _size_data-0x18;
    _size_bss_reduced = _size_bss-0x4;
    _size_sbss_reduced = _size_sbss-0x1C;
    _size_sdata2_reduced = _size_sdata2-0x10;
}
